@inject IAppointmentService _appointmentService
@inject DialogService _dialogService

<div class="row">
    <div class="col-lg-8">
        <RadzenScheduler style="height:740px;" @ref=@scheduler LoadData="@OnLoadData" TItem="AppointmentCalendarDetails"
        Data=@calendarAppointments StartProperty="Start" EndProperty="End" TextProperty="Title" SelectedIndex="2"
        SlotSelect=@OnSlotSelect AppointmentSelect=@OnAppointmentSelect AppointmentRender=@OnAppointmentRender>
            <RadzenDayView />
            <RadzenWeekView />
            <RadzenMonthView />
        </RadzenScheduler>
    </div>
    <div class="col-lg-4">
        <h1 class="fw-400">@appointmentsDisplayTitle</h1>
        <hr />

        @if ((employeeAppointments?.Count ?? 0) > 0)
        {
            <RadzenTree style="width: 100%;" Data="@employeeAppointments">
                <RadzenTreeLevel TextProperty="ServiceTitle" ChildrenProperty="Customers" />
                <RadzenTreeLevel TextProperty="ServiceCustomerDescription" HasChildren="@((customer) => false)">
                    <Template>
                        <span @onclick="() => OnServiceCustomerSelect(context.Value as ServiceCustomer)">@((context.Value as ServiceCustomer).ServiceCustomerDescription)</span>
                    </Template>
                </RadzenTreeLevel>
            </RadzenTree>
        }
        else
        {
            <p class="lead">@appointmentsDisplayMessage</p>
            <a href="#">Crea una cita</a>
        }
    </div>
</div>

@code {
    private DateTime selectedDate;
    private string appointmentsDisplayTitle;
    private string appointmentsDisplayMessage;
    private RadzenScheduler<AppointmentCalendarDetails> scheduler;
    private IList<AppointmentCalendarDetails> calendarAppointments;
    private IList<EmployeeServiceAppointments> employeeAppointments;

    protected override async Task OnInitializedAsync()
    {
        appointmentsDisplayTitle = selectedDate.ToString("D", new CultureInfo("es-ES"));
        appointmentsDisplayMessage = "Seleccione un día en el calendario para ver el listado de citas aquí.";
    }

    private async Task OnLoadData(SchedulerLoadDataEventArgs args)
    {
        // Populate calendar
        calendarAppointments = await _appointmentService.GetAppointmentsBetweenDates(args.Start, args.End);
    }

    private async Task OnSlotSelect(SchedulerSlotSelectEventArgs args)
    {
        // Get employee appointments for selected date
        selectedDate = args.Start.Date;
        appointmentsDisplayTitle = selectedDate.ToString("D", new CultureInfo("es-ES"));
        appointmentsDisplayMessage = "No tiene ninguna cita hoy.";
        employeeAppointments = await _appointmentService.GetEmployeeServiceAppointmentsByDate(selectedDate);
    }

    private async Task OnAppointmentSelect(SchedulerAppointmentSelectEventArgs<AppointmentCalendarDetails> args)
    {
        // Show appointment details in a modal
        await _dialogService.OpenAsync<AppointmentDetailsPage>("", new Dictionary<string, object> { { "AppointmentId", args.Data.AppointmentId } });
        await scheduler.Reload();
    }

    private void OnAppointmentRender(SchedulerAppointmentRenderEventArgs<AppointmentCalendarDetails> args)
    {
        var currentTime = DateTime.UtcNow.ToLocalTime();
        if (args.Data.End < currentTime)
        {
            args.Attributes["style"] = "background: #B0C4DE";
        }else
        {
            args.Attributes["style"] = "background: #17a2b8";
        }
    }

    private async Task OnServiceCustomerSelect(ServiceCustomer serviceCustomer)
    {
        // Show appointment details in a modal
        await _dialogService.OpenAsync<AppointmentDetailsPage>("", new Dictionary<string, object> { { "AppointmentId", serviceCustomer.AppointmentId } });
        await scheduler.Reload();
        employeeAppointments = await _appointmentService.GetEmployeeServiceAppointmentsByDate(selectedDate);
    }
}
