@inject IAppointmentService _appointmentService

<div class="row">
    <div class="col-xl-8">
        <RadzenScheduler style="height: 768px;" @ref=@scheduler LoadData="@OnLoadData" TItem="AppointmentCalendarDetails"
        Data=@calendarAppointments StartProperty="Start" EndProperty="End" TextProperty="Title" SelectedIndex="2"
        SlotSelect=@OnSlotSelect AppointmentSelect=@OnAppointmentSelect AppointmentRender=@OnAppointmentRender>
            <RadzenDayView />
            <RadzenWeekView />
            <RadzenMonthView />
        </RadzenScheduler>
    </div>
    <div class="col-xl-4">
        <h3>@displayedDate</h3>
        <hr />

        @if ((employeeAppointments?.Count ?? 0) > 0)
        {
            <RadzenTree Data="@employeeAppointments">
                <RadzenTreeLevel TextProperty="ServiceTitle" ChildrenProperty="Customers" />
                <RadzenTreeLevel TextProperty="ServiceCustomerDescription" HasChildren="@((customer) => false)" />
            </RadzenTree>
        }
        else
        {
            <h3>Disfruta tu día. No tiene ninguna cita hoy.</h3>
        }
    </div>
</div>

@code {
    private string displayedDate;
    RadzenScheduler<AppointmentCalendarDetails> scheduler;
    IList<AppointmentCalendarDetails> calendarAppointments;
    IList<EmployeeServiceAppointments> employeeAppointments;

    async Task OnLoadData(SchedulerLoadDataEventArgs args)
    {
        // Appointment details for current day
        var today = DateTime.UtcNow.ToLocalTime().Date;
        displayedDate = today.ToString("D", new CultureInfo("es-ES"));
        employeeAppointments = await _appointmentService.GetEmployeeServiceAppointmentsByDate(today);

        // Populate calendar
        calendarAppointments = await _appointmentService.GetAppointmentsBetweenDates(args.Start, args.End);
    }

    async Task OnSlotSelect(SchedulerSlotSelectEventArgs args)
    {
        // Get employee appointments for selected date
        displayedDate = args.Start.Date.ToString("D", new CultureInfo("es-ES"));
        employeeAppointments = await _appointmentService.GetEmployeeServiceAppointmentsByDate(args.Start.Date);
    }

    async Task OnAppointmentSelect(SchedulerAppointmentSelectEventArgs<AppointmentCalendarDetails> args)
    {
        // Display appointment details in a modal with a reschedule and cancel button.
    }

    void OnAppointmentRender(SchedulerAppointmentRenderEventArgs<AppointmentCalendarDetails> args)
    {
        // Choose a nice color for appointments
    }
}
