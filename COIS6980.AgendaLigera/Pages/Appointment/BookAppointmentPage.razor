@inject IAppointmentService _appointmentService
@inject DialogService _dialogService
@inject NotificationService _notificationService

@if ((serviceProviders?.Count ?? 0) > 0)
{
    <div class="row">
        <div class="col-12">
            <RadzenDropDown class="d-block w-50 m-auto" Placeholder="Doctora" AllowClear="false" TValue="int" TextProperty="EmployeeName"
                        ValueProperty="EmployeeId" Data=@serviceProviders @bind-Value=@selectedEmployeeId
                        Change=@OnEmployeeChange />
            <br />
            <RadzenDropDown class="d-block w-50 m-auto" Placeholder="Servicio" AllowClear="false" TValue="int" TextProperty="ServiceName"
                        ValueProperty="ServiceId" Disabled=@(selectedEmployeeId == 0)
                        Data=@employeeServices @bind-Value=@selectedServiceId
                        Change=@OnServiceChange />
            <br />
            <RadzenDatePicker class="d-block w-50 m-auto" TValue="DateTime?" DateFormat="d" DateRender=@OnDateRender
                          Disabled=@(selectedServiceId == 0) @bind-Value=@selectedDate
                          Change=@OnDateChange />
            <br />
            <RadzenDropDown class="d-block w-50 m-auto" Placeholder="Hora" AllowClear="false" TValue="int" TextProperty="FormattedTime"
                        ValueProperty="ServiceScheduleId" Disabled=@((availableSchedules?.Count ?? 0) == 0)
                        Data=@availableSchedules @bind-Value=@selectedServiceScheduleId />
            <br />
            <RadzenDropDown class="d-block w-50 m-auto" Placeholder="Paciente" AllowClear="false" TValue="int" TextProperty="ServiceRecipientName"
                        ValueProperty="ServiceRecipientId" Data=@serviceRecipients @bind-Value=@selectedServiceRecipientId />
        </div>
        <div class="col-12 text-center mt-3">
            <button @onclick="ConfirmAppointmentBooking" disabled="@(selectedServiceScheduleId == 0 || selectedServiceRecipientId == 0)"
                class="btn btn-outline-info btn-sm" type="button">
                Programar cita
            </button>
        </div>
    </div>
}
else
{
    <div class="row">
        <div class="col-12">
            <p class="lead mt-1">Lo sentimos, no hay citas disponibles en este momento. Por favor, inténtelo de nuevo más tarde.</p>
        </div>
    </div>
}

@code {
    [Parameter]
    public string UserId { get; set; }

    private int selectedEmployeeId;
    private int selectedServiceId;
    private DateTime? selectedDate;
    private int selectedServiceScheduleId;
    private int selectedServiceRecipientId;

    private List<EmployeeDetails> serviceProviders = new List<EmployeeDetails>();
    private List<ServiceDetails> employeeServices = new List<ServiceDetails>();
    private List<ServiceScheduleDetails> availableSchedules = new List<ServiceScheduleDetails>();
    private List<ServiceRecipientDetails> serviceRecipients = new List<ServiceRecipientDetails>();

    private List<ServiceScheduleDetails> availableAppointmentsForCalendar = new List<ServiceScheduleDetails>();

    protected override async Task OnParametersSetAsync()
    {
        selectedDate = DateTime.UtcNow.ToLocalTime().Date;
        serviceProviders = await _appointmentService.GetServiceProvidersForBooking(UserId);
        serviceRecipients = await _appointmentService.GetServiceRecipientsForBooking(UserId);
    }

    private async Task OnEmployeeChange()
    {
        selectedServiceId = 0;
        selectedServiceScheduleId = 0;
        employeeServices = await _appointmentService.GetEmployeeServicesForBooking(selectedEmployeeId);
    }

    private async Task OnServiceChange()
    {
        availableSchedules = await _appointmentService.GetAvailableServiceAppointmentsForBooking(selectedServiceId, selectedDate.GetValueOrDefault());
        await UpdateAvailableAppointmentsForCalendar();
    }

    private async Task OnDateChange(DateTime? date)
    {
        availableSchedules = await _appointmentService.GetAvailableServiceAppointmentsForBooking(selectedServiceId, selectedDate.GetValueOrDefault());
        await UpdateAvailableAppointmentsForCalendar();
    }

    private async Task ConfirmAppointmentBooking()
    {
        // Create appointment with selected data
        await _appointmentService.BookAppointment(selectedServiceRecipientId, selectedServiceScheduleId);

        var notification = new NotificationMessage()
        {
            Severity = NotificationSeverity.Success,
            Summary = "¡Muy bien!",
            Detail = "La cita ha sido creada.",
            Duration = 3000
        };

        _dialogService.Close();
        _notificationService.Notify(notification);
    }

    // This following methods help show available appointment dates by highlighting the calendar picker

    private async Task UpdateAvailableAppointmentsForCalendar()
    {
        var firstDayOfMonth = new DateTime(selectedDate.GetValueOrDefault().Year, selectedDate.GetValueOrDefault().Month, 1);
        var lastDayOfMonth = firstDayOfMonth.AddMonths(1).AddDays(-1);

        availableAppointmentsForCalendar = await _appointmentService
            .GetAvailableServiceAppointmentsBetweenDates(selectedServiceId, firstDayOfMonth, lastDayOfMonth);
    }

    private void OnDateRender(DateRenderEventArgs args)
    {
        var availableAppointmentDates = availableAppointmentsForCalendar.Select(x => x.StartDate.Date).ToList();
        if (availableAppointmentDates.Contains(args.Date))
        {
            args.Attributes.Add("style", "background-color: #8ff0ff;");
        }
    }
}
