@inject IAppointmentService _appointmentService
@inject DialogService _dialogService
@inject NotificationService _notificationService

@if (rescheduleStatus == false)
{
    <div class="row">
        <div class="col-lg-7">
            <h3 class="fw-400">Para cuando desea reprogramar la cita?</h3>
            <RadzenDatePicker TValue="DateTime?" Inline="true" DateRender=@OnDateRender Change=@OnDateChange />
        </div>
        <div class="col-lg-5">
            <b>Fecha seleccionada</b>
            <h3 class="fw-400">@selectedCalendarDate.Date.ToString("D", new CultureInfo("es-ES"))</h3>
            <b>Citas disponibles</b>
            <RadzenDropDown Placeholder="Seleccione..." AllowClear="false" TValue="int" TextProperty="FormattedTime"
                        ValueProperty="ServiceScheduleId" Disabled=@disabledDropDown
                        Data=@(availableAppointments.Where(x => x.StartDate.Date == selectedCalendarDate))
                        @bind-Value=@selectedServiceScheduleId />
        </div>
        <div class="col-12 mt-3 text-center">
            <button @onclick="StartRescheduleFlow" disabled="@(selectedServiceScheduleId == 0)" class="btn btn-outline-info btn-sm" type="button">Reprogramar</button>
            <button @onclick="async () => await ToggleStatus.InvokeAsync()" class="btn btn-outline-secondary btn-sm" type="button">Llévame de vuelta</button>
        </div>
    </div>
}
else
{
    <div class="row">
        <div class="col-12 mb-4">
            <h2 class="fw-400">¿Estás segura de que quieres reprogramar la cita?</h2>
        </div>
        <br />
        <div class="col-md-6">
            <b>Fecha de cita previa</b>
            <h3 class="fw-400">@AppointmentDetails?.FormattedDate</h3>
            <b>Hore de cita previa</b>
            <h3 class="fw-400">@AppointmentDetails?.FormattedTime</h3>
        </div>
        <div class="col-md-6">
            <b>Fecha de cita nueva</b>
            <h3 class="fw-400">@newAppointmentDate</h3>
            <b>Hora de cita nueva</b>
            <h3 class="fw-400">@newAppointmentTime</h3>
        </div>
        <br />
        <div class="col-12 mt-4 text-center">
            <button @onclick="RescheduleAppointment" class="btn btn-outline-danger btn-sm" type="button">Estoy segura</button>
            <button @onclick="ToggleRescheduleStatus" class="btn btn-outline-secondary btn-sm" type="button">Llévame de vuelta</button>
        </div>
    </div>
}

@code {
    [Parameter]
    public int AppointmentId { get; set; }

    [Parameter]
    public AppointmentDetails AppointmentDetails { get; set; }

    [Parameter]
    public EventCallback ToggleStatus { get; set; }

    private bool disabledDropDown = true;
    private bool rescheduleStatus = false;
    private int selectedServiceScheduleId = 0;
    private string newAppointmentDate = "";
    private string newAppointmentTime = "";
    private List<ServiceScheduleDetails> availableAppointments = new List<ServiceScheduleDetails>();
    private DateTime selectedCalendarDate;

    protected override async Task OnParametersSetAsync()
    {
        selectedCalendarDate = DateTime.UtcNow.ToLocalTime().Date;
        var firstDayOfMonth = new DateTime(selectedCalendarDate.Year, selectedCalendarDate.Month, 1);
        var lastDayOfMonth = firstDayOfMonth.AddMonths(1).AddDays(-1);

        availableAppointments = await _appointmentService
            .GetAvailableServiceAppointmentsBetweenDates(AppointmentDetails.ServiceId, firstDayOfMonth, lastDayOfMonth);

        disabledDropDown = !(availableAppointments.Where(x => x.StartDate.Date == selectedCalendarDate).Count() > 0);
    }

    private void OnDateRender(DateRenderEventArgs args)
    {
        var availableAppointmentDates = availableAppointments.Select(x => x.StartDate.Date).ToList();
        if (availableAppointmentDates.Contains(args.Date))
        {
            args.Attributes.Add("style", "background-color: #8ff0ff;");
        }
    }

    private async Task OnDateChange(DateTime? date)
    {
        if (date != null)
        {
            var newSelectedDate = date.GetValueOrDefault();

            if (newSelectedDate.Month != selectedCalendarDate.Month || newSelectedDate.Year != selectedCalendarDate.Year)
            {
                var firstDayOfMonth = new DateTime(newSelectedDate.Year, newSelectedDate.Month, 1);
                var lastDayOfMonth = firstDayOfMonth.AddMonths(1).AddDays(-1);

                availableAppointments = await _appointmentService
                    .GetAvailableServiceAppointmentsBetweenDates(AppointmentDetails.ServiceId, firstDayOfMonth, lastDayOfMonth);
            }

            selectedCalendarDate = newSelectedDate;
            disabledDropDown = !(availableAppointments.Where(x => x.StartDate.Date == selectedCalendarDate).Count() > 0);
        }

        // Reset dropdown selection
        selectedServiceScheduleId = 0;
    }

    private void StartRescheduleFlow()
    {
        newAppointmentDate = availableAppointments.Where(x => x.ServiceScheduleId == selectedServiceScheduleId).FirstOrDefault().FormattedDate;
        newAppointmentTime = availableAppointments.Where(x => x.ServiceScheduleId == selectedServiceScheduleId).FirstOrDefault().FormattedTime;
        ToggleRescheduleStatus();
    }

    private void ToggleRescheduleStatus()
    {
        rescheduleStatus = !rescheduleStatus;
    }

    private async Task RescheduleAppointment()
    {
        await _appointmentService.RescheduleAppointment(AppointmentId, selectedServiceScheduleId);

        var notification = new NotificationMessage()
        {
            Severity = NotificationSeverity.Success,
            Summary = "Muy bien!",
            Detail = "La cita ha sido reprogramada.",
            Duration = 3000
        };

        _dialogService.Close();
        _notificationService.Notify(notification);
    }
}
