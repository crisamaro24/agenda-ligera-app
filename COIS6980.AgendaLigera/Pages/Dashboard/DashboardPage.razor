@page "/dashboard"
@attribute [Authorize(Roles = "Doctora,Secretaria,Paciente")]
@inject IHttpContextAccessor _httpContextAccessor
@inject IAppointmentService _appointmentService
@inject DialogService _dialogService

<div class="row">
    <div class="col-lg-4 order-lg-2 mb-4">
        <h2 class="fw-400">@selectedDate.GetValueOrDefault().ToString("D", new CultureInfo("es-ES"))</h2>
        <RadzenDatePicker @bind-Value=@selectedDate TValue="DateTime?" DateFormat="d" DateRender=@OnDateRender Change=@OnDateChange />
        <button @onclick="SelectedDateToCurrent" class="btn btn-outline-secondary btn-sm mb-1" type="button">Hoy</button>
        <hr />
        <button @onclick="BookAppointment" class="btn btn-outline-info btn-sm" type="button">Programar una cita</button>
    </div>
    <div class="col-lg-8 order-lg-1">
        <h1 class="fw-400">Citas programadas</h1>
        @if ((appointmentsForSelectedDate?.Count ?? 0) > 0)
        {
            <RadzenDataList WrapItems="true" AllowPaging="true" Data=@appointmentsForSelectedDate TItem="AppointmentDetails">
                <Template Context="appointment">
                    <div class="row">
                        <div class="col-lg-5">
                            <b>Doctora</b>
                            <h3 class="fw-400">@appointment.ServiceProviderName</h3>
                            <b>Servicio</b>
                            <h3 class="fw-400">@appointment.ServiceName</h3>
                            <b>Hora</b>
                            <h3 class="fw-400">@appointment.FormattedTime</h3>
                        </div>
                        <div class="col-lg-5">
                            <b>Paciente</b>
                            <h3 class="fw-400">@appointment.ServiceRecipientName</h3>
                            <b>Fecha</b>
                            <h3 class="fw-400">@appointment.FormattedDate</h3>
                        </div>
                        @if (appointment.EndDate > currentTime)
                        {
                            <div class="col-xl-2 mt-4">
                                <button @onclick="() => ManageAppointment(appointment.AppointmentId)" class="btn btn-outline-info btn-sm" type="button">Gestionar</button>
                            </div>
                        }
                </div>
            </Template>
        </RadzenDataList>
        }
        else
        {
            <p class="lead text-center mt-3">¡Disfruta tu día! No tiene ninguna cita hoy.</p>
        }
    </div>
</div>

@code {
    private string userId;
    private DateTime currentTime;
    private DateTime? selectedDate;
    private List<AppointmentDetails> appointmentsForSelectedDate = new List<AppointmentDetails>();
    private List<AppointmentCalendarDetails> appointmentsForCalendar = new List<AppointmentCalendarDetails>();

    protected override async Task OnInitializedAsync()
    {
        userId = _httpContextAccessor.HttpContext.User.GetUserId();
        await SelectedDateToCurrent();
        await UpdateAppointmentsForCalendar();
    }

    private async Task RefreshAppointmentsList()
    {
        appointmentsForSelectedDate = await _appointmentService.GetAppointmentDetailsListByDate(selectedDate.GetValueOrDefault(), userId);
    }

    private async Task OnDateChange(DateTime? date)
    {
        await UpdateAppointmentsForCalendar();
        await RefreshAppointmentsList();
    }

    private async Task ManageAppointment(int appointmentId)
    {
        await _dialogService.OpenAsync<AppointmentDetailsPage>("", new Dictionary<string, object> { { "AppointmentId", appointmentId } });
        await RefreshAppointmentsList();
    }

    private async Task BookAppointment()
    {
        await _dialogService.OpenAsync<BookAppointmentPage>("Programar una cita nueva", new Dictionary<string, object> { { "UserId", userId } });
        await RefreshAppointmentsList();
    }

    private async Task SelectedDateToCurrent()
    {
        currentTime = DateTime.UtcNow.ToLocalTime();
        selectedDate = currentTime.Date;
        await RefreshAppointmentsList();
    }

    private async Task UpdateAppointmentsForCalendar()
    {
        var firstDayOfMonth = new DateTime(selectedDate.GetValueOrDefault().Year, selectedDate.GetValueOrDefault().Month, 1);
        var lastDayOfMonth = firstDayOfMonth.AddMonths(1).AddDays(-1);

        appointmentsForCalendar = await _appointmentService
            .GetAppointmentsBetweenDates(firstDayOfMonth, lastDayOfMonth, userId);
    }

    private void OnDateRender(DateRenderEventArgs args)
    {
        currentTime = DateTime.UtcNow.ToLocalTime();

        var appointmentDates = appointmentsForCalendar.Select(x => x.Start.Date).ToList();
        if (appointmentDates.Contains(args.Date))
        {
            if (args.Date.Date < currentTime.Date)
            {
                args.Attributes.Add("style", "background-color: #B0C4DE;");
            }
            else
            {
                args.Attributes.Add("style", "background-color: #8ff0ff;");
            }
        }
    }
}
