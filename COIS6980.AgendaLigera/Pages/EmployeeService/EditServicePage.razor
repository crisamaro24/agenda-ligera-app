@inject IEmployeeServices _employeeServices
@inject DialogService _dialogService
@inject NotificationService _notificationService
@inject TooltipService _tooltipService

@if (serviceWithSameNameFound == false)
{
    <div class="row">
        <div class="col-12">
            @if (inputValidationFailed == true)
            {
                <div class="alert alert-danger" role="alert">
                    Todos los campos de entrada son requeridos.
                </div>
            }
            <div class="row">
                <div class="col-8">
                    <RadzenTextBox class="w-100" Placeholder="Nombre del servicio" @bind-Value=@Service.ServiceName MaxLength="100" />
                </div>
                <div class="col-4">
                    <RadzenNumeric class="w-100" Placeholder="Duración estimada en minutos" @bind-Value=@Service.EstimatedDurationInMinutes
                               ShowUpDown="false" TValue="int" Min="1"
                               MouseEnter=@(args => ShowTooltip(args, new TooltipOptions(){ Duration = 2000, Position = TooltipPosition.Left, Text = "Duración estimada en minutos" })) />
                </div>
            </div>
            <br />
            <RadzenTextArea class="d-block w-100 m-auto" Rows="5" Placeholder="Descripción del servicio" @bind-Value=@Service.ServiceDescription />
        </div>
        <div class="col-12 text-center mt-3">
            <button @onclick="ConfirmServiceUpdate" class="btn btn-outline-info btn-sm" type="button">
                Modificar servicio
            </button>
        </div>
    </div>
}
else
{
    <div class="row">
        <div class="col-md-6">
            <h3 class="fw-400">Ya tienes un servicio con el mismo nombre. ¿Estás segura de que quieres modificar el servicio?</h3>
        </div>
        <div class="col-md-6 mt-3 text-center">
            <button @onclick="UpdateService" class="btn btn-outline-danger btn-sm" type="button">Estoy segura</button>
            <button @onclick="ToggleServiceWithSameNameFoundValue" class="btn btn-outline-secondary btn-sm" type="button">Llévame de vuelta</button>
        </div>
    </div>
}

@code {
    [Parameter]
    public string UserId { get; set; }

    [Parameter]
    public EmployeeService Service { get; set; }

    private bool serviceWithSameNameFound = false;
    private bool inputValidationFailed = false;

    private void ToggleServiceWithSameNameFoundValue()
    {
        serviceWithSameNameFound = !serviceWithSameNameFound;
    }

    private async Task ConfirmServiceUpdate()
    {
        if (string.IsNullOrWhiteSpace(Service.ServiceName) || string.IsNullOrWhiteSpace(Service.ServiceDescription) || Service.EstimatedDurationInMinutes == 0)
            inputValidationFailed = true;
        else
        {
            inputValidationFailed = false;
            serviceWithSameNameFound = await _employeeServices.DuplicateServiceNameFound(UserId, Service.ServiceName, Service.ServiceId);

            if (serviceWithSameNameFound == false)
                await UpdateService();
        }
    }

    private async Task UpdateService()
    {
        await _employeeServices.UpdateService(Service.ServiceId, Service.ServiceName, Service.ServiceDescription, Service.EstimatedDurationInMinutes);

        var notification = new NotificationMessage()
        {
            Severity = NotificationSeverity.Success,
            Summary = "¡Muy bien!",
            Detail = "El servicio ha sido modificado.",
            Duration = 3000
        };

        _dialogService.Close();
        _notificationService.Notify(notification);
    }

    private void ShowTooltip(ElementReference elementReference, TooltipOptions options = null) => _tooltipService.Open(elementReference, options.Text, options);
}
