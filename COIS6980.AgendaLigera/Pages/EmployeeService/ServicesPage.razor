@page "/servicios"
@attribute [Authorize(Roles = "Doctora")]
@inject IHttpContextAccessor _httpContextAccessor
@inject NotificationService _notificationService
@inject IEmployeeServices _employeeServices
@inject DialogService _dialogService

<div class="row">
    <div class="col-xl-4 order-xl-2 mb-3">
        <div class="card card-body" style="min-height:190px;">
            <p class="lead">Seleccione un servicio</p>
            <RadzenDropDown Placeholder="Servicio" AllowClear="false" TValue="int" TextProperty="ServiceName"
                            ValueProperty="ServiceId" Data=@servicesOffered @bind-Value=@selectedServiceId
                            Disabled=@(currentService.ServiceId == 0) Change=@OnServiceChange />
            <div class="mt-4">
                <button @onclick="CreateService" class="btn btn-outline-info btn-sm" type="button">Crear un servicio</button>
                <button @onclick="CreateSchedule" disabled="@(currentService.ServiceId == 0)" class="btn btn-outline-secondary btn-sm" type="button">Crear horario</button>
            </div>
        </div>
    </div>
    <div class="col-xl-8 order-xl-1 mb-3">
        @if (currentService.ServiceId == 0)
        {
            <p class="lead mt-3">Aún no ha creado ningún servicio. Luego de crear uno, lograrás verlo aquí.</p>
        }
        else
        {
            <div class="card card-body">
                <div class="row">
                    <div class="col-lg-7">
                        <b>Servicio</b>
                        <h3 class="fw-400">@currentService.ServiceName</h3>
                        <b>Descripción</b>
                        <div style="height:70px;overflow-y:auto;">
                            <p class="fw-400">@currentService.ServiceDescription</p>
                        </div>
                    </div>
                    <div class="col-lg-3">
                        <b class="d-block">Estado</b>
                        <RadzenDropDown class="w-75" Placeholder="Estado" AllowClear="false" TValue="bool" TextProperty="StateName"
                                    ValueProperty="StateValue" Data=@serviceStateList @bind-Value=@currentService.IsActive
                                    Change=@OnServiceStateChange />
                        <b class="d-block">Duración estimada</b>
                        <h3 class="fw-400">@currentService.EstimatedDurationInMinutes minutos</h3>
                    </div>
                    <div class="col-xl-2 mt-4">
                        <button @onclick="EditService" class="btn btn-outline-info btn-sm" type="button">Modificar</button>
                    </div>
                </div>
            </div>
        }
    </div>
    <div class="col-12 order-3 mt-1">
        @if (currentService.ServiceId != 0)
        {
            <RadzenScheduler style="height:920px;" @ref=@scheduler LoadData="@OnLoadData" TItem="ServiceSchedule"
                         Data=@currentServiceSchedules StartProperty="Start" EndProperty="End" TextProperty="ScheduleDisplayText" SelectedIndex="2"
                         SlotSelect=@OnSlotSelect AppointmentSelect=@OnAppointmentSelect AppointmentRender=@OnAppointmentRender>
                <RadzenDayView />
                <RadzenWeekView />
                <RadzenMonthView />
            </RadzenScheduler>
        }
    </div>
</div>

@code {
    private string userId;
    private int selectedServiceId;
    private EmployeeService currentService = new EmployeeService();
    private List<EmployeeService> servicesOffered = new List<EmployeeService>();

    private RadzenScheduler<ServiceSchedule> scheduler;
    private List<ServiceSchedule> currentServiceSchedules = new List<ServiceSchedule>();

    private List<ServiceState> serviceStateList = new List<ServiceState>();

    protected override async Task OnParametersSetAsync()
    {
        userId = _httpContextAccessor.HttpContext.User.GetUserId();
        servicesOffered = await _employeeServices.GetServicesOffered(userId);
        serviceStateList = GetServiceStates();

        if (servicesOffered.Count > 0)
        {
            currentService = servicesOffered.First();
            selectedServiceId = currentService.ServiceId;
        }
    }

    private async Task EditService()
    {
        var serviceToEdit = new EmployeeService()
        {
            ServiceId = currentService.ServiceId,
            ServiceName = currentService.ServiceName,
            ServiceDescription = currentService.ServiceDescription,
            EstimatedDurationInMinutes = currentService.EstimatedDurationInMinutes,
            IsActive = currentService.IsActive
        };

        await _dialogService.OpenAsync<EditServicePage>("Modificar el servicio", new Dictionary<string, object> { { "UserId", userId }, { "Service", serviceToEdit } });

        // Update display
        servicesOffered = await _employeeServices.GetServicesOffered(userId);
        currentService = servicesOffered.FirstOrDefault(x => x.ServiceId == selectedServiceId);
    }

    private async Task OnServiceChange()
    {
        currentService = servicesOffered.Where(x => x.ServiceId == selectedServiceId).First();
        await scheduler.Reload();
    }

    private async Task CreateService()
    {
        await _dialogService.OpenAsync<CreateServicePage>("Crear un servicio nuevo", new Dictionary<string, object> { { "UserId", userId } });
        servicesOffered = await _employeeServices.GetServicesOffered(userId);

        if (servicesOffered.Count == 1)
        {
            currentService = servicesOffered.First();
            selectedServiceId = currentService.ServiceId;
        }
    }

    private async Task CreateSchedule()
    {
        await _dialogService.OpenAsync<AddServiceSchedulePage>("Crear un horario nuevo",
        new Dictionary<string, object> { { "ServiceId", selectedServiceId }, { "ServiceName", currentService.ServiceName } });
        await scheduler.Reload();
    }

    private async Task OnLoadData(SchedulerLoadDataEventArgs args)
    {
        currentServiceSchedules = await _employeeServices.GetServiceSchedulesBetweenDates(selectedServiceId, args.Start, args.End, userId);
    }

    private async Task OnSlotSelect(SchedulerSlotSelectEventArgs args)
    {
        await _dialogService.OpenAsync<AddServiceSchedulePage>("Crear un horario nuevo",
        new Dictionary<string, object> { { "ServiceId", selectedServiceId }, { "ServiceName", currentService.ServiceName }, { "ScheduleDate", args.Start } });
        await scheduler.Reload();
    }

    private async Task OnAppointmentSelect(SchedulerAppointmentSelectEventArgs<ServiceSchedule> args)
    {
        await _dialogService.OpenAsync<EditServiceSchedule>("Horario del servicio",
        new Dictionary<string, object> { { "ServiceName", currentService.ServiceName }, { "ServiceSchedule", args.Data } });
        await scheduler.Reload();
    }

    private void OnAppointmentRender(SchedulerAppointmentRenderEventArgs<ServiceSchedule> args)
    {
        var currentTime = DateTime.UtcNow.ToLocalTime();
        if (args.Data.End < currentTime)
        {
            args.Attributes["style"] = "background: #B0C4DE";
        }
        else
        {
            args.Attributes["style"] = "background: #17a2b8";
        }
    }

    private async Task OnServiceStateChange()
    {
        await _employeeServices.UpdateServiceState(currentService.ServiceId, currentService.IsActive);

        var notification = new NotificationMessage()
        {
            Severity = NotificationSeverity.Success,
            Summary = "¡Muy bien!",
            Detail = "El estado del servicio ha sido modificado.",
            Duration = 3000
        };

        _notificationService.Notify(notification);
    }

    private List<ServiceState> GetServiceStates()
    {
        return new List<ServiceState>()
        {
            new ServiceState()
            {
                StateName = "Activo",
                StateValue = true
            },
            new ServiceState()
            {
                StateName = "Pausado",
                StateValue = false
            }
        };
    }
}
