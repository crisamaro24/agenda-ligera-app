@page "/fetchdata"

@using COIS6980.AgendaLigera.Data
@inject IWeatherForecastService _forecastService
@inject NotificationService _notificationService

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a service.</p>

@if (forecasts == null)
{
    @*<p><em>Loading...</em></p>*@
    <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" Style="margin-bottom: 20px" />
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[] forecasts;
    private NotificationMessage notification;

    protected override async Task OnInitializedAsync()
    {
        forecasts = await _forecastService.GetForecastAsync(DateTime.Now);

        if (forecasts != null)
        {
            notification = new NotificationMessage()
            {
                Severity = NotificationSeverity.Success,
                Summary = "Success!",
                Detail = "We did it...",
                Duration = 3000
            };
        }
        else
        {
            notification = new NotificationMessage()
            {
                Severity = NotificationSeverity.Error,
                Summary = "Error!",
                Detail = "Failure is not an option...",
                Duration = 3000
            };
        }

        _notificationService.Notify(notification);
    }
}
